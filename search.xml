<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>将网站收录到bing和Google 添加sitemap</title>
      <link href="/posts/15f61212.html"/>
      <url>/posts/15f61212.html</url>
      
        <content type="html"><![CDATA[<p>由于今天突然发现自己的网站被必应收录了，索性就把它提交给搜索引擎吧</p><p><del>别问为什么没有百度</del></p><h1 id="Hexo配置文件"><a href="#Hexo配置文件" class="headerlink" title="Hexo配置文件"></a>Hexo配置文件</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>检查根目录下的 <code>_config.yml</code>中sitemap（站点地址）是否开启</p><p><img src="https://i.imgtg.com/2023/03/17/lsuix.png"></p><p><img src="https://i.imgtg.com/2023/03/17/ls32p.png"></p><p>确认开启后安装 sitemap</p><h1 id="生成sitemap"><a href="#生成sitemap" class="headerlink" title="生成sitemap"></a>生成sitemap</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>这样，我们就获得了一份站点地址</p><p>当然，你需要执行 <code>hexo cl</code> 和 <code>hexo g</code> 才能生成public文件并在其中找到它</p><h1 id="提交网站"><a href="#提交网站" class="headerlink" title="提交网站"></a>提交网站</h1><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>为了确定你是网站管理员，我们需要通过验证。</p><p>进入Google Search Console 输入网址</p><p><img src="https://i.imgtg.com/2023/03/17/lVOVv.png"></p><p>可以是二级域名或者子域名，这里以子域名继续</p><p><img src="https://i.imgtg.com/2023/03/17/lVoqq.png"></p><p>下载验证文件，将它放到</p><p><strong>根目录 \ themes \ 你的主题 \ source 中</strong></p><p><strong>注意，不是根目录下的source！！！</strong></p><h2 id="部署并验证"><a href="#部署并验证" class="headerlink" title="部署并验证"></a>部署并验证</h2><p>进入根目录，一键三连将它部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo -clean</span><br><span class="line">hexo -g</span><br><span class="line">hexo -d</span><br></pre></td></tr></table></figure><p>部署完毕后，点击验证，稍等片刻</p><p><img src="https://i.imgtg.com/2023/03/17/lVqrc.png"></p><p>如果一切顺利，恭喜</p><h1 id="设置sitemap"><a href="#设置sitemap" class="headerlink" title="设置sitemap"></a>设置sitemap</h1><p><img src="https://i.imgtg.com/2023/03/17/lV5Qr.png"></p><p>在sitemap地址中输入 <code>sitemap.xml</code> 提交</p><p>由于服务器有延迟，需要稍等片刻</p><h2 id="必应"><a href="#必应" class="headerlink" title="必应"></a>必应</h2><p>由于我们已经完成了Google的验证，所以在这边我们只需要导入就行</p><p><img src="https://i.imgtg.com/2023/03/17/lVBCM.png"></p><p><img src="https://i.imgtg.com/2023/03/17/lVvmS.png"></p><p>同样的，我们再设置一下站点地址</p><p><img src="https://i.imgtg.com/2023/03/17/lVyYN.png"></p><p>现在网站可以被正常搜索到了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双链表及基本操作( 类 )</title>
      <link href="/posts/2d53b15f.html"/>
      <url>/posts/2d53b15f.html</url>
      
        <content type="html"><![CDATA[<h1 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表( Linked List )"></a>链表( Linked List )</h1><p>链表是一种线性数据结构，由一系列节点组成。每个节点包含两个部分，一个是存储数据的部分，另一个是指向下一个节点的指针。与数组不同的是，<strong>链表中的节点在内存中不一定是连续存储的。</strong></p><p>链表可以分为单向链表和双向链表两种类型。在单向链表中，每个节点只有一个指向下一个节点的指针，而在双向链表中，每个节点有两个指针，一个指向前一个节点，另一个指向后一个节点。</p><p>链表的插入和删除操作非常高效，因为只需要修改节点的指针即可完成操作。但是，链表的访问操作需要从头节点开始，逐个遍历直到找到目标节点，时间复杂度为O(n)，相比数组的O(1)访问时间要慢很多。</p><p>链表的优点是可以灵活地动态添加和删除节点，而且在内存管理方面比数组更加灵活。链表广泛应用于算法和数据结构中，例如链表可以用来实现栈、队列、哈希表等数据结构。</p><hr><p>因为单链表比较简单，结构也比较单一，本篇文章就不做介绍</p><h1 id="双链表-Doubly-Linked-List"><a href="#双链表-Doubly-Linked-List" class="headerlink" title="双链表 ( Doubly Linked List )"></a>双链表 ( Doubly Linked List )</h1><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/03/DLL1.png"></p><p>双链表 （DLL） 包含一个额外的指针 <code>prev</code>，以及 <code>next</code> 指针和链表中的 <code>data</code> </p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>我们以c++中的类为例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="comment">// 指向双链表的下一个结点</span></span><br><span class="line">Node* next;</span><br><span class="line"><span class="comment">// 指向双链表的前一个结点</span></span><br><span class="line">Node* prev;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加一个构造函数 用于初始化</span></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val) &#123;</span><br><span class="line">data = val;</span><br><span class="line">prev = <span class="literal">NULL</span>;</span><br><span class="line">next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码定义了一个名为 <code>Node</code> 的类，它表示双链表中的一个节点。该类具有三个成员变量：</p><ol><li><code>int data</code>：该节点存储的数据。</li><li><code>Node* next</code>：指向双链表中的下一个节点，它是一个指针类型。</li><li><code>Node* prev</code>：指向双链表中的前一个节点，它也是一个指针类型。</li></ol><p>在双链表中，每个节点都有两个指针，一个指向前一个节点，一个指向后一个节点。因此，通过定义<code>prev</code>和<code>next</code>两个指针变量，该类实现了双链表节点的功能。</p><h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p>可以通过四种方式添加节点：</p><ul><li>在 DLL 的前面</li><li>在给定节点之后</li><li>在 DLL 的末尾</li><li>在给定节点之前</li></ul><p>为了使用起来更方便，再声明一个名为 <code>Doubly linked list</code> 的类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node* head; <span class="comment">//头节点</span></span><br><span class="line"><span class="built_in">DoublyLinkedList</span>() &#123;</span><br><span class="line">head = <span class="literal">NULL</span>; <span class="comment">//同样的，构造函数用于初始化</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们为它添加方法</p><h3 id="在DLL头部插入"><a href="#在DLL头部插入" class="headerlink" title="在DLL头部插入"></a>在DLL头部插入</h3><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/03/DLL_add_front1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertAtHead</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新节点的数据域</span></span><br><span class="line">newNode-&gt;data = val;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前链表为空，则将新节点设置为头节点</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">head = newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新节点的next指针，指向当前链表的头节点</span></span><br><span class="line">newNode-&gt;next = head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前链表的头节点的prev指针，指向新节点</span></span><br><span class="line">head-&gt;prev = newNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将新节点设置为当前链表的头节点</span></span><br><span class="line">head = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在给定位置之后插入"><a href="#在给定位置之后插入" class="headerlink" title="在给定位置之后插入"></a>在给定位置之后插入</h3><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/03/DLL_add_middle1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertAfter</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个current来记录当前节点</span></span><br><span class="line">Node* current = head;</span><br><span class="line"><span class="comment">//count 用于记录是否到达目标位置</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//依次遍历，并检查目标是否合法</span></span><br><span class="line">    <span class="keyword">while</span> (count &lt; pos - <span class="number">1</span> &amp;&amp; current != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">current = current-&gt;next;<span class="comment">//每次遍历更新节点</span></span><br><span class="line">count++;<span class="comment">//更新</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果目标位置不合法</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="literal">NULL</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Invalid position&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//找到目标，更新</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//将当前节点指向的下一个节点更新到新节点</span></span><br><span class="line">        newNode-&gt;next = current-&gt;next;</span><br><span class="line">        <span class="comment">//新节点的上一个节点更新为当前节点</span></span><br><span class="line">newNode-&gt;prev = current;</span><br><span class="line">        <span class="comment">//如果插入位置不是尾节点</span></span><br><span class="line"><span class="keyword">if</span> (current-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="comment">//跟新下一个节点的prev指针为当前节点</span></span><br><span class="line">current-&gt;next-&gt;prev = newNode;</span><br><span class="line">        <span class="comment">//最后加入新节点</span></span><br><span class="line">current-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你<strong>不知道之前节点</strong>的 <code>prev</code> 指针，那么就需要像上面这样从头开始遍历(或从尾 这里不细写了，思想是一样的)</p><p>如果要从知道的<strong>某一节点</strong>之后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertAfter</span><span class="params">(Node* prevNode, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 检查是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (prev_node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the given previous node cannot be NULL&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2. 创建新节点</span></span><br><span class="line">    Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3. 将当前节点指向的下一个节点更新到新节点</span></span><br><span class="line">    newNode-&gt;next = prevNode-&gt;next;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 4. 新节点的上一个节点更新为当前节点</span></span><br><span class="line">    prevNode-&gt;next = newNode;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 5. 新节点的上一个节点更新</span></span><br><span class="line">    newNode-&gt;prev = prevNode;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 6. 如果插入位置不是尾节点</span></span><br><span class="line">    <span class="keyword">if</span> (new_node-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="comment">// 跟新下一个节点的prev指针为当前节点</span></span><br><span class="line">        new_node-&gt;next-&gt;prev = new_node;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="在给定位置之前插入"><a href="#在给定位置之前插入" class="headerlink" title="在给定位置之前插入"></a>在给定位置之前插入</h3><img src="https://media.geeksforgeeks.org/wp-content/uploads/5-55-300x100.png" style="zoom:200%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertBefore</span><span class="params">(Node* nextNode, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nextNode == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;the given next node cannot be NULL&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新节点的数据 这里传入的val已经在Node()中构造</span></span><br><span class="line"><span class="comment">//newNode-&gt;data = newData;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将新节点插入到nextNode之前</span></span><br><span class="line">newNode-&gt;prev = nextNode-&gt;prev;</span><br><span class="line">nextNode-&gt;prev = newNode;</span><br><span class="line">newNode-&gt;next = nextNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果新节点不是头节点，则更新新节点上一节点的next指针</span></span><br><span class="line"><span class="keyword">if</span> (newNode-&gt;prev != <span class="literal">NULL</span>)</span><br><span class="line">newNode-&gt;prev-&gt;next = newNode;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">head = newNode; <span class="comment">// 如果新节点是头节点，则将head指向新节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在DLL尾部插入"><a href="#在DLL尾部插入" class="headerlink" title="在DLL尾部插入"></a>在DLL尾部插入</h3><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/03/DLL_add_end1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新节点的数据域</span></span><br><span class="line"><span class="comment">//newNode-&gt;data = newData;</span></span><br><span class="line"><span class="comment">//newNode-&gt;next = NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果链表为空，则将新节点作为头节点</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">newNode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">head = newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到链表的最后一个节点</span></span><br><span class="line">Node* last = head; <span class="comment">//创建一个节点代表目前最后节点 从头遍历</span></span><br><span class="line"><span class="keyword">while</span> (last-&gt;next != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">last = last-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将新节点插入到链表的最后一个节点之后</span></span><br><span class="line">last-&gt;next = newNode;</span><br><span class="line">    <span class="comment">// 更新新节点的prev指针</span></span><br><span class="line">newNode-&gt;prev = last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="合并链表"><a href="#合并链表" class="headerlink" title="合并链表"></a>合并链表</h2><p>我们可以声明一个函数，直接对类操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DoublyLinkedList <span class="title">mergeLists</span><span class="params">(DoublyLinkedList list1, DoublyLinkedList list2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化一个名为合并链表的链表</span></span><br><span class="line">    DoublyLinkedList mergeList;</span><br><span class="line">    <span class="comment">// 声明两个临时节点</span></span><br><span class="line">Node* current1 = list1.head;</span><br><span class="line">Node* current2 = list2.head;</span><br><span class="line">    <span class="comment">// 下面就是判断合并的条件</span></span><br><span class="line"><span class="keyword">while</span>(current1 != <span class="literal">NULL</span> || current2 != <span class="literal">NULL</span>)<span class="comment">// 两个链表若为空就直接返回</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(current1 == <span class="literal">NULL</span> &amp;&amp; current2 !=<span class="literal">NULL</span>)<span class="comment">// 若链表2不为空</span></span><br><span class="line">&#123;</span><br><span class="line">mergeList.<span class="built_in">insertAtTail</span>(current2-&gt;data);<span class="comment">// 将链表2的元素逐步尾插到mergeLists</span></span><br><span class="line">current2 = current2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(current2 == <span class="literal">NULL</span> &amp;&amp; current1 !=<span class="literal">NULL</span>)<span class="comment">// 若链表1不为空</span></span><br><span class="line">&#123;</span><br><span class="line">mergeList.<span class="built_in">insertAtTail</span>(current1-&gt;data);<span class="comment">// 将链表1的元素逐步尾插到mergeLists</span></span><br><span class="line">current1 = current1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(current1 != <span class="literal">NULL</span> &amp;&amp; current2 != <span class="literal">NULL</span>)<span class="comment">// 若链表1 和 链表2都不为空</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 比较 将两个链表中较小的元素先尾插</span></span><br><span class="line">            <span class="keyword">if</span>(current1-&gt;data &lt; current2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">mergeList.<span class="built_in">insertAtTail</span>(current1-&gt;data);</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">                current1 = current1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mergeList.<span class="built_in">insertAtTail</span>(current2-&gt;data);</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">                current2 = current2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mergeList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><h3 id="顺序打印"><a href="#顺序打印" class="headerlink" title="顺序打印"></a>顺序打印</h3><p>从头节点开始遍历，逐个打印</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(DoublyLinkedList list)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* current = list.head;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序打印"><a href="#逆序打印" class="headerlink" title="逆序打印"></a>逆序打印</h3><p>需要遍历到最后一个节点，再往前打印</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printReverseList</span><span class="params">(DoublyLinkedList list)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* current = list.head;</span><br><span class="line"><span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(current != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">current = current-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>以上就是 使用C++中的类来完成对链表的基本操作</p><p>如果您发现有误，请在评论区留言或联系我</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针的简单使用</title>
      <link href="/posts/94087718.html"/>
      <url>/posts/94087718.html</url>
      
        <content type="html"><![CDATA[<p>本人很菜，决定先学下指针最简单的使用，便于调用函数</p><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="指针变量的声明"><a href="#指针变量的声明" class="headerlink" title="指针变量的声明"></a>指针变量的声明</h2><p>指针变量的声明需要指定变量类型和指针所指向的数据类型，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p;     <span class="comment">// 声明一个指向整型变量的指针变量p</span></span><br><span class="line"><span class="type">char</span>* q;    <span class="comment">// 声明一个指向字符型变量的指针变量q</span></span><br><span class="line"><span class="type">float</span>* r;   <span class="comment">// 声明一个指向浮点型变量的指针变量r</span></span><br></pre></td></tr></table></figure><h2 id="取地址符-amp-指针运算符"><a href="#取地址符-amp-指针运算符" class="headerlink" title="取地址符&amp;  指针运算符*"></a>取地址符&amp;  指针运算符*</h2><p>**&amp;**是取地址符，可以用来获取变量的内存地址。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = &amp;a;   <span class="comment">// 将a的地址赋值给指针变量p</span></span><br></pre></td></tr></table></figure><p>**<em><strong>是指针运算符，可以用来</strong>获取指针所指向的变量的值</em>*，也可以用来修改指针所指向的变量的值。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);    <span class="comment">// 输出10，表示指针p所指向的变量的值</span></span><br><span class="line">*p = <span class="number">20</span>;               <span class="comment">// 修改指针p所指向的变量的值为20</span></span><br></pre></td></tr></table></figure><h2 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h2><p>指针可以进行加减运算，指针加上一个整数n的结果是指针指向的地址加上n倍指针所指向变量的大小。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span>* p = &amp;a[<span class="number">0</span>];</span><br><span class="line">p += <span class="number">2</span>;   <span class="comment">// 指针p指向数组a的第3个元素a[2]</span></span><br></pre></td></tr></table></figure><h2 id="指针的类型转换"><a href="#指针的类型转换" class="headerlink" title="指针的类型转换"></a>指针的类型转换</h2><p>指针变量的类型可以通过强制类型转换进行改变。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="type">char</span>* q = (<span class="type">char</span>*)p;   <span class="comment">// 将指向整型变量a的指针p转换成指向字符型变量的指针q</span></span><br></pre></td></tr></table></figure><p><em>需要注意的是，指针类型的转换可能会丢失精度或导致错误，应谨慎使用。</em></p><h1 id="调用函数返回多个结果"><a href="#调用函数返回多个结果" class="headerlink" title="调用函数返回多个结果"></a>调用函数返回多个结果</h1><h2 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multy</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>* res, <span class="type">double</span>* mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    *res = sum;<span class="comment">//res存的是地址  *res和sum才是同一级</span></span><br><span class="line">    *mid = sum/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,res;</span><br><span class="line">    <span class="type">double</span> mid;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">multy</span>(a,b,&amp;res,&amp;mid);<span class="comment">//输入实参 取地址运算</span></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; mid &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h1><p>数组指针（Pointer to array）是指向数组的指针变量。和普通指针不同的是，数组指针在声明时需要指定指针所指向的数组类型和数组的维数。</p><p>数组指针的声明语法如下：</p><blockquote><p>type (*ptr)[size];</p></blockquote><p>其中，type是数组元素的类型，ptr是指针变量的名称，size是数组的维数。例如，下面是一个指向int类型、维数为3的数组的指针变量的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*ptr)[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>数组指针可以指向任何维数的数组，但是数组指针的类型必须和它所指向的数组的类型和维数一致，否则会出现类型不匹配的错误。</p></li><li><p>使用数组指针访问数组元素时，需要使用指针运算符和下标运算符。例如，要访问数组a中第i行第j列的元素，可以使用以下语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(*(a+i)+j)</span><br></pre></td></tr></table></figure></li><li><p>数组指针可以用于函数参数传递。例如，可以将一个指向int类型数组的指针变量作为函数参数传递给一个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> (*ptr)[<span class="number">3</span>], <span class="type">int</span>* x, <span class="type">int</span>* y, <span class="type">int</span>* z)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 访问数组元素</span></span><br><span class="line">    *x = (*ptr)[<span class="number">0</span>] + <span class="number">1</span>;<span class="comment">//为了区分，我们再做一点运算</span></span><br><span class="line">    *y = (*ptr)[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    *z = (*ptr)[<span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span> (*ptr)[<span class="number">3</span>] = &amp;a;<span class="comment">//数组指针</span></span><br><span class="line">    <span class="built_in">func</span>(ptr,&amp;x,&amp;y,&amp;z);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; (*ptr)[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">//指向数组元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; z &lt;&lt; endl; <span class="comment">//访问并进行运算后返回的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 </span><br><span class="line">2 3 4</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用例-1"><a href="#使用例-1" class="headerlink" title="使用例"></a>使用例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sumfun</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> len, <span class="type">long</span> <span class="type">long</span>* res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = s + p[i];<span class="comment">//也可以写 s = s + *(p+i)</span></span><br><span class="line">    &#125;</span><br><span class="line">    *res = s;<span class="comment">//res指向&amp;res *res保存答案</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="built_in">sizeof</span>(a));<span class="comment">//数组初始化为-1</span></span><br><span class="line">    <span class="built_in">sumfun</span>(a,<span class="number">100</span>,&amp;res);<span class="comment">//a表示数组元素首地址</span></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-100</span><br></pre></td></tr></table></figure><p>这下可以随便封装、调用函数了</p>]]></content>
      
      
      <categories>
          
          <category> 指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS简单入门</title>
      <link href="/posts/c1fdd123.html"/>
      <url>/posts/c1fdd123.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>最近才把之前放下的数据结构捡起来，就以宽搜来开头吧</p><p><del>摆烂两个月，我是小丑</del></p><h1 id="广度优先搜索（Breadth-First-Search）"><a href="#广度优先搜索（Breadth-First-Search）" class="headerlink" title="广度优先搜索（Breadth First Search）"></a>广度优先搜索（Breadth First Search）</h1><ul><li><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>就不细说了，详见</p><blockquote><p><a href="http://data.biancheng.net/view/326.html">广度优先搜索（BFS）算法详解 (biancheng.net)</a></p><p><a href="https://blog.csdn.net/g11d111/article/details/76169861">BFS——广度优先算法（Breadth First Search）_sooner高的博客-CSDN博客_bfs</a></p></blockquote></li><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，求从一个状态到另一个状态所需的<strong>最少</strong>变换次数，使用<strong>BFS</strong></p></li></ul></li></ul><hr><h1 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h1><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>​一个入口，一个出口，有边界，有墙阻挡，求最短路径</p><p>​<em>这里就以6x6的地图大小了</em></p><p>​用**#<strong>表示墙，</strong>0**为可走，黄色表示起点和终点</p><p>​输入地图、起点坐标、终点坐标</p><p>​<img src="https://i.imgtg.com/2023/02/24/scerK.png" alt="scerK.png"></p><ul><li><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#0###</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#0#0#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0000<span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0<span class="comment">#0##</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0000<span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###0#</span></span></span><br><span class="line">1 3 6 5</span><br></pre></td></tr></table></figure></li><li><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure></li><li><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">##0###</span></span><br><span class="line"><span class="comment">##0#0#</span></span><br><span class="line"><span class="comment">#0000#</span></span><br><span class="line"><span class="comment">#0#0##</span></span><br><span class="line"><span class="comment">#0000#</span></span><br><span class="line"><span class="comment">####0#</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">char</span> ditu[N][N];</span><br><span class="line"><span class="type">int</span> flag[N][N] = &#123;<span class="number">0</span>&#125;; <span class="comment">//记录状态</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">&#125;POINT;</span><br><span class="line">queue&lt;POINT&gt; q;<span class="comment">//队列</span></span><br><span class="line"><span class="type">int</span> go[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//上下左右</span></span><br><span class="line"><span class="type">int</span> start_x,start_y,end_x,end_y;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="type">int</span> area=<span class="number">6</span>;<span class="comment">//地图大小 就按6*6了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//先把初始状态 入队 再 出队</span></span><br><span class="line">    POINT startp;</span><br><span class="line">    startp.x = start_x;</span><br><span class="line">    startp.y = start_y;</span><br><span class="line">    startp.step = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(startp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())<span class="comment">//队列不为空一直执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        POINT headp = q.<span class="built_in">front</span>(); <span class="comment">//取当前队列的头给临时变量</span></span><br><span class="line">        q.<span class="built_in">pop</span>();<span class="comment">//出队 拓展</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> new_x = headp.x + go[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> new_y = headp.y + go[i][<span class="number">1</span>];<span class="comment">//上下左右拓展</span></span><br><span class="line">            <span class="keyword">if</span>(flag[new_x][new_y] || new_x &lt; <span class="number">1</span> || new_y &lt; <span class="number">1</span> || new_x &gt; area || new_y &gt; area || ditu[new_x][new_y]) <span class="comment">//是否到达过 边界 墙</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            flag[new_x][new_y] = <span class="number">1</span>;</span><br><span class="line">            POINT joinp;</span><br><span class="line">            joinp.x = new_x;</span><br><span class="line">            joinp.y = new_y;</span><br><span class="line">            joinp.step = headp.step + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(new_x == end_x &amp;&amp; new_y == end_y)<span class="comment">//判断是否结束</span></span><br><span class="line">            &#123;</span><br><span class="line">                res = joinp.step;</span><br><span class="line">            &#125;</span><br><span class="line">            q.<span class="built_in">push</span>(joinp);<span class="comment">//入队 继续</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> trs;<span class="comment">//临时变量转换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=area; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=area; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; trs;</span><br><span class="line">            <span class="keyword">if</span>(trs == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                ditu[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ditu[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; start_x &gt;&gt; start_y &gt;&gt; end_x &gt;&gt; end_y;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="奇怪的电梯"><a href="#奇怪的电梯" class="headerlink" title="奇怪的电梯"></a>奇怪的电梯</h1><p><a href="https://www.luogu.com.cn/problem/P1135">https://www.luogu.com.cn/problem/P1135</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://i.imgtg.com/2023/02/24/scrQa.png" alt="scrQa.png"></p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p><img src="https://i.imgtg.com/2023/02/24/scA3S.png" alt="scA3S.png"></p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，即最少按键次数，若无法到达，则输出 <code>-1</code>。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 1 5</span><br><span class="line">3 3 1 2 5</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><img src="https://i.imgtg.com/2023/02/24/scZiN.png" alt="scZiN.png"></p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> start_f,end_f;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> flr[<span class="number">201</span>];<span class="comment">//记录每一楼层上对应的次数</span></span><br><span class="line"><span class="type">int</span> flag[<span class="number">201</span>];<span class="comment">//标记状态</span></span><br><span class="line"><span class="type">int</span> res = <span class="number">-1</span>;<span class="comment">//找不到输出-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span><span class="comment">//定义一个结构体 表示当前楼层和按钮次数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> loc;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">&#125;POINT;</span><br><span class="line">queue&lt;POINT&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    POINT ST;</span><br><span class="line">    ST.loc = start_f;</span><br><span class="line">    ST.step = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(ST);<span class="comment">//常规流程 入队 出队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        POINT STHead = q.<span class="built_in">front</span>();<span class="comment">//临时变量 存当前队头</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> newu,newd;</span><br><span class="line">        newu = STHead.loc + flr[STHead.loc];<span class="comment">//向上移动的层数</span></span><br><span class="line">        newd = STHead.loc - flr[STHead.loc];<span class="comment">//向下移动的层数</span></span><br><span class="line">        POINT JOIN;<span class="comment">//临时变量 用来保存可行的状态</span></span><br><span class="line">        <span class="keyword">if</span>(flag[newu]==<span class="number">-1</span> &amp;&amp; newu &lt;= N)</span><br><span class="line">        &#123;</span><br><span class="line">            JOIN.loc = newu;</span><br><span class="line">            JOIN.step = STHead.step + <span class="number">1</span>;</span><br><span class="line">            flag[newu]=<span class="number">0</span>;<span class="comment">//记录到达过</span></span><br><span class="line">            q.<span class="built_in">push</span>(JOIN);</span><br><span class="line">            <span class="keyword">if</span>(JOIN.loc == end_f)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(res==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    res = JOIN.step;<span class="comment">//找到最少次数</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag[newd]==<span class="number">-1</span> &amp;&amp; newd &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            JOIN.loc = newd;</span><br><span class="line">            JOIN.step = STHead.step + <span class="number">1</span>;</span><br><span class="line">            flag[newd]=<span class="number">0</span>;<span class="comment">//记录到达过</span></span><br><span class="line">            q.<span class="built_in">push</span>(JOIN);</span><br><span class="line">            <span class="keyword">if</span>(JOIN.loc == end_f)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(res==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    res = JOIN.step;<span class="comment">//找到最少次数</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; start_f &gt;&gt; end_f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; flr[i];<span class="comment">//读取对应楼层编号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(flag,<span class="number">-1</span>,<span class="built_in">sizeof</span>(flag));<span class="comment">//初始化</span></span><br><span class="line">    <span class="comment">//flag[start_f] = 0;</span></span><br><span class="line">    <span class="keyword">if</span>(start_f == end_f)<span class="comment">//如果初始楼层和要到达楼层为同一层 则直接输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><del>不敢摆了，近期会写bfs进阶和dfs入门</del></p><p>救救孩子吧，赶不上校队选拔和蓝桥杯了</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于字符串的定义、函数和输入</title>
      <link href="/posts/83f97962.html"/>
      <url>/posts/83f97962.html</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>字符串是一个或多个字符序列</p></blockquote><ul><li><p><strong>字符串常量 (string constant)</strong></p><p>用双引号括起来的内容称为字符串字面量 (string literal) , 也叫做字符串常量 (string constant) 如：</p><p>“I have an apple.” ( 在内存中存储时，编译器自动在末尾加入’\0’ )</p></li><li><p><strong>字符串和字符数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">6</span>]=<span class="string">&quot;apple&quot;</span>;</span><br><span class="line"><span class="type">char</span> a[<span class="number">6</span>]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;<span class="comment">//声明字符串，两句意思相同</span></span><br><span class="line"><span class="type">char</span> a[]=<span class="string">&quot;apple&quot;</span><span class="comment">//也可以省略初始化声明中的大小，编译器会自动计算数组的大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">5</span>]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;<span class="comment">//这是字符数组，不是字符串!!!(没有&#x27;\0&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="在C和C-中的区别"><a href="#在C和C-中的区别" class="headerlink" title="在C和C++中的区别"></a>在C和C++中的区别</h1><ul><li><p><strong>在C语言中，字符串存储在char类型数组中</strong></p><p>实际是一堆数组，以<code>&#39;/0&#39;</code>为结束标志</p></li><li><p><strong>在C++中，字符串为string类</strong></p><p>string是C++类库中的一个类，存在于名称空间<code>using std::string</code>中，使用时需要导入类库<code>#include&lt;string&gt;</code></p><p>初始化<code>string s=&quot;aaa&quot;</code>或<code>string s(&quot;aaa&quot;)</code></p></li></ul><h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p><strong>头文件 #include &lt;string.h&gt;</strong></p><p><strong>strlen()</strong></p><p><strong>strcat()</strong></p><p><strong>strcmp()</strong></p><p><strong>strncmp()</strong></p><p><strong>strcpy()</strong></p><p><strong>strncpy()</strong></p><p><strong>strchr()</strong></p><p><strong>strrchr()</strong></p><p><strong>strstr()</strong></p><hr><ul><li><h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h3></li></ul><p>计算的是字符串str的长度，从字符的首地址开始遍历，以 <code>&#39;\0&#39;</code> 为结束标志，然后将计算的长度返回，计算的长度并不包含<code>&#39;\0&#39;</code><em>（最后一位下标等于长度-1）</em></p><hr><ul><li><h3 id="strcat"><a href="#strcat" class="headerlink" title="strcat()"></a>strcat()</h3></li></ul><p>将两个字符串拼接在一起并返回前一个字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">20</span>]=<span class="string">&quot;Golden&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">20</span>]=<span class="string">&quot;View&quot;</span>;</span><br><span class="line"><span class="built_in">strcat</span>(str1,str2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,str1);</span><br><span class="line">运行结果: GoldenView</span><br></pre></td></tr></table></figure><hr><ul><li><h3 id="strncat"><a href="#strncat" class="headerlink" title="strncat()"></a>strncat()</h3></li></ul><p>把src所指字符串的前n个字符添加到dest所指字符串的结尾处，并覆盖dest所指字符串结尾的<code>&#39;\0&#39;</code>，从而实现字符串的连接，返回指向dest的指针</p><blockquote><p>函数声明：char * strncat(char *dest, const char *src, size_t n);</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line"><span class="type">char</span> dest[<span class="number">20</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> src[<span class="number">10</span>] = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="built_in">strncat</span>(dest, src, n);<span class="comment">//n=3为src前n个字符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dest);</span><br><span class="line">运行结果: HelloWor</span><br></pre></td></tr></table></figure><hr><ul><li><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h3></li></ul><p>比较两个字符串并根据比较结果返回整数。若str1&#x3D;str2，则返回0；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数</p><blockquote><p>函数声明：strcmp(const char *s1,const char *s2);</p></blockquote><hr><ul><li><h3 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp()"></a>strncmp()</h3></li></ul><p>把 str1 和 str2 进行比较，最多比较前 n 个字节，若str1与str2的前n个字符相同，则返回0；若s1大于s2，则返回正数；若s1 小于s2，则返回负数</p><blockquote><p>int strncmp ( const char * str1, const char * str2, size_t n );</p></blockquote><p><em>strcmp()和strncmp()都可以实现查找</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*strncmpexample*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[][<span class="number">5</span>]=&#123;<span class="string">&quot;R2D2&quot;</span>,<span class="string">&quot;C3PO&quot;</span>,<span class="string">&quot;R2A6&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Looking for R2 as tromechdroids...&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">3</span>;n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strncmp</span>(str[n],<span class="string">&quot;R2xx&quot;</span>,<span class="number">2</span>)==<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;found %s\n&quot;</span>,str[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog.imtop1.moe/wp-content/shuomcblog/zfc4.png"></p><hr><ul><li><h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy()"></a>strcpy()</h3></li></ul><p>将一个字符串复制到另一块空间地址中 的函数，<code>&#39;\0&#39;</code>是停止拷贝的终止条件，同时会将 <code>&#39;\0&#39;</code> 也复制到目标空间</p><blockquote><p>函数原型：char* strcpy(char* destination,const char* source);</p></blockquote><p><em>strcpy 不够安全，可能导致越界</em></p><p>注意事项：</p><p>1.源字符必须以 ‘\0’结束</p><p>2.目标空间必须足够大，以确保能放源字符串</p><p>3.目标空间必须可变</p><hr><ul><li><h3 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy()"></a>strncpy()</h3></li></ul><p>把src所指由<code>&#39;\0&#39;</code>结束的字符串的前n个字节复制到dest所指的数组中，如果src的前n个字节不含<code>&#39;\0&#39;</code>，则结果不会以<code>&#39;\0&#39;</code>结束，如果src的长度小于n个字节，则以<code>&#39;\0&#39;</code>填充dest直到复制完n个字节</p><blockquote><p>函数声明：char *strncpy(char *s1, const char *s2, size_t n);</p></blockquote><p>注意事项：<br>src和dest所指内存区域不可以重叠且dest必须有足够的空间来容纳src的字符串</p><hr><ul><li><h3 id="strchr"><a href="#strchr" class="headerlink" title="strchr()"></a>strchr()</h3></li></ul><p>在字符串 s 中<strong>从前往后</strong>查找字符 c，返回字符 c 第一次在字符串 s 中出现的位置，如果未找到字符 c，则返回 NULL</p><blockquote><p>函数原型：char *strchr(const char *s, int c);</p></blockquote><hr><ul><li><h3 id="strrchr"><a href="#strrchr" class="headerlink" title="strrchr()"></a>strrchr()</h3></li></ul><p>在字符串 s 中<strong>从后往前</strong>查找字符 c，返回字符 c 第一次在字符串 s 中出现的位置，如果未找到字符 c，则返回 NULL</p><blockquote><p>函数声明：char *strrchr(const char *s, int c);</p></blockquote><hr><ul><li><h3 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h3></li></ul><p>在字符串str1中查找str2，返回值为char * 类型（ 返回指向 str1 中第一次出现的 str2 的指针）；如果 str2 不是 str1 的一部分，则返回空指针</p><blockquote><p>函数声明：char *strstr(const char *str1, const char *str2)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*strstrexample*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;This is a simple string&quot;</span>;</span><br><span class="line"><span class="type">char</span>* pch;</span><br><span class="line">pch = <span class="built_in">strstr</span>(str, <span class="string">&quot;simple&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pch != <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">strncpy</span>(pch, <span class="string">&quot;sample&quot;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数实现：<a href="https://blog.csdn.net/m0_65601072/article/details/125901220">https://blog.csdn.net/m0_65601072/article/details/125901220</a></p><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><p><strong>string类型字符串支持C风格字符串的所有操作，此外还增加了更多功能：</strong></p><p><strong>s.empty()</strong> : 判断string是否为空</p><p><strong>s.size()</strong> : 返回string字符个数，返回值是一个无符号整型（size_type），不能与int进行比较</p><p><strong>s.length()</strong></p><p><strong>reverse(str.begin(), str.end())</strong> : 串倒置</p><p><strong>s1.append(s2)</strong> : 在s1末尾添加字符串s2</p><p><strong>s.push_back(‘ ‘)</strong> : 在s末尾添加单个字符</p><p><strong>s1.find(s2)</strong> : 在s1中查找s2位置</p><p><strong>s1.rfind(s2)</strong> : 在s1中逆向查找s2位置</p><p><strong>s1.insert(n,s2)</strong> : 在s1位置n处插入字符串s2</p><p><strong>s1.replace(n1,n2,s2)</strong> : 将s1中位置n1到n2间的字符串替换为s2</p><p><strong>s.substr(n,m)</strong> : 返回位置n处长度为m的子字符串</p><p><strong>s1+s2</strong> : 返回s1和s2连接后的结果</p><p><strong>s1&#x3D;&#x3D;s2，s1!&#x3D;s2</strong> : 返回s1和s2是否相等</p><p><strong>&lt;，&lt;&#x3D;，&gt;，&gt;&#x3D;</strong> : 比较字符串大小</p><hr><ul><li><h3 id="s-size"><a href="#s-size" class="headerlink" title="s.size()"></a>s.size()</h3></li></ul><p><code>s.size()</code>函数返回值的实际类型是<code>string::size_type</code>，该类型是一个<strong>无符号整型数</strong>。在表达式中混用<code>unsigned int</code>与<code>int</code>可能产生意想不到的结果</p><p>例如<code>s.size()-3</code>，由于<code>s.size()</code>返回无符号数，故当<code>s.size()&lt;3</code>时，<code>s.size()-3</code>依旧是正数，而非负数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    cout&lt;&lt;s1.<span class="built_in">size</span>()<span class="number">-3</span>&lt;&lt;endl;</span><br><span class="line">    string s2=<span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    cout&lt;&lt;s2.<span class="built_in">size</span>()<span class="number">-3</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog.imtop1.moe/wp-content/shuomcblog/zfc5.png"></p><p>故在将<code>s.size()</code>与<code>int</code>作加减或比较，应尽量先将其转换成<code>int</code></p><hr><ul><li><h3 id="s-append"><a href="#s-append" class="headerlink" title="s.append()"></a>s.append()</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s =<span class="string">&quot;hello &quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* c =<span class="string">&quot;shuomc here&quot;</span>;</span><br><span class="line">    s.<span class="built_in">append</span>(c,<span class="number">6</span>); </span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello shuomc</span><br></pre></td></tr></table></figure><hr><ul><li><h3 id="s-push-back"><a href="#s-push-back" class="headerlink" title="s.push_back()"></a>s.push_back()</h3></li></ul><p>在s末尾插入单个字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s =<span class="string">&quot;hello &quot;</span>;</span><br><span class="line">    s.<span class="built_in">push_back</span>(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello @</span><br></pre></td></tr></table></figure><hr><ul><li><h3 id="s-find"><a href="#s-find" class="headerlink" title="s.find()"></a>s.find()</h3></li></ul><p>string中find()返回值是字母在母串中的下标位置<br>如果没有找到，那么会返回一个特别的标记npos，一般写作<code>string::npos</code></p><p><strong>返回的是首字母的下标</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s, c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  s = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">  c = <span class="string">&quot;l&quot;</span>;</span><br><span class="line">  <span class="type">int</span> index = s.<span class="built_in">find</span>(c);</span><br><span class="line">  <span class="keyword">if</span> (index != string::npos)</span><br><span class="line">  cout &lt;&lt; index &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p><strong>s.find(str，pos)</strong></p><p>用来寻找从pos开始(包括pos处字符)匹配str的位置</p><p><strong>返回的是首字母的下标</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s, c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  s = <span class="string">&quot;appleapple&quot;</span>;</span><br><span class="line">  c = <span class="string">&quot;l&quot;</span>;</span><br><span class="line">  <span class="type">int</span> index = s.<span class="built_in">find</span>(c,<span class="number">4</span>);<span class="comment">//从字符串s下标4的位置开始寻找</span></span><br><span class="line">  <span class="keyword">if</span> (index != string::npos)</span><br><span class="line">  cout &lt;&lt; index &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><p><strong>s.find_first_of(str) 和 s.find_last_of(str)</strong></p><p>找到目标字符在字符串中第一次出现和最后一次出现的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s, c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  s = <span class="string">&quot;laaaal&quot;</span>;</span><br><span class="line">  c = <span class="string">&quot;l&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;first index:&quot;</span> &lt;&lt; s.<span class="built_in">find_first_of</span>(c) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;last index:&quot;</span> &lt;&lt; s.<span class="built_in">find_last_of</span>(c) &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first index:0</span><br><span class="line">last index:5</span><br></pre></td></tr></table></figure><p><strong>index&#x3D;s.find(c,index)</strong></p><p>查找目标字符串在字符串出现的总次数，index每次都会更新下一次找到的位置，如果没有找到跳出循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s, c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (cin &gt;&gt; s &gt;&gt; c) </span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">int</span> index = <span class="number">0</span>;<span class="comment">//用来存储不断更新最新找到的位置</span></span><br><span class="line">      <span class="type">int</span> sum = <span class="number">0</span>;<span class="comment">//累加出现的次数</span></span><br><span class="line">      <span class="keyword">while</span> ((index = s.<span class="built_in">find</span>(c,index)) != string::npos) </span><br><span class="line">      &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;sum: &quot;</span> &lt;&lt; sum+<span class="number">1</span> &lt;&lt; <span class="string">&quot; index: &quot;</span> &lt;&lt; index &lt;&lt;endl;</span><br><span class="line">          index += c.<span class="built_in">length</span>();<span class="comment">//上一次s中与c完全匹配的字符应跳过，不再比较</span></span><br><span class="line">          sum++;</span><br><span class="line">      &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">llllll</span><br><span class="line">ll</span><br><span class="line">sum: 1 index: 0</span><br><span class="line">sum: 2 index: 2</span><br><span class="line">sum: 3 index: 4</span><br><span class="line">3</span><br></pre></td></tr></table></figure><hr><ul><li><h3 id="s-rfind"><a href="#s-rfind" class="headerlink" title="s.rfind()"></a>s.rfind()</h3></li></ul><p><code>s.rfind(str)</code> 从字符串右侧开始匹配str，并返回在字符串中的下标位置</p><p><code>s.rfind(str，pos)</code> 从pos开始，向前查找符合条件的字符串</p><hr><ul><li><h3 id="s-replace"><a href="#s-replace" class="headerlink" title="s.replace()"></a>s.replace()</h3></li></ul><p>替换字符串</p><p><strong>用法一</strong></p><p>从起始位置pos开始长度为len的字符</p><blockquote><p>replace (size_t pos, size_t len, const string&amp; str);</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">str.<span class="built_in">replace</span>(<span class="number">6</span>,<span class="number">5</span>,<span class="string">&quot;girl.&quot;</span>);  <span class="comment">//当前字符串从下标6开始的五个字符替换为&quot;girl.&quot;</span></span><br><span class="line">cout&lt;&lt;str&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello girl.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用法二</strong></p><p>用重复n次的c字符替换从指定位置的内容</p><blockquote><p>replace (const_iterator i1, const_iterator i2, size_t n, char c);</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">str.<span class="built_in">replace</span>(<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="string">&#x27;@&#x27;</span>);  <span class="comment">//当前字符串从下标6开始的五个字符替换为3个@</span></span><br><span class="line">cout&lt;&lt;str&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello @@@</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其它用法详见</p><blockquote><p><a href="https://blog.csdn.net/qq_40239482/article/details/105193493">https://blog.csdn.net/qq_40239482/article/details/105193493</a></p></blockquote><hr><ul><li><h3 id="s-substr"><a href="#s-substr" class="headerlink" title="s.substr()"></a>s.substr()</h3></li></ul><p>返回位置n处长度为m的子字符串 <em>( 截断 )</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">  string str2 = str1.<span class="built_in">substr</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">  cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bcde</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ul><li><h3 id="s-insert"><a href="#s-insert" class="headerlink" title="s.insert()"></a>s.insert()</h3></li></ul><p>将 s1 插在 s[pos] 处</p><blockquote><p>s.insert( size_t pos,string s1 )</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s = <span class="string">&quot;shuomc&quot;</span>;</span><br><span class="line">    string s1 = <span class="string">&quot;114514&quot;</span>;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">1</span>,s1);</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s114514huomc</span><br></pre></td></tr></table></figure><p>在s[pos]处插入n个字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s = <span class="string">&quot;shuomc&quot;</span>;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s@@@huomc</span><br></pre></td></tr></table></figure><hr><ul><li><h3 id="reverse-str-begin-str-end"><a href="#reverse-str-begin-str-end" class="headerlink" title="reverse(str.begin(), str.end())"></a>reverse(str.begin(), str.end())</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str = <span class="string">&quot;shuomc&quot;</span>;</span><br><span class="line">  <span class="built_in">reverse</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>())</span><br><span class="line">  cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmouhs</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="读取和输入"><a href="#读取和输入" class="headerlink" title="读取和输入"></a>读取和输入</h1><h2 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h2><ul><li><h4 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h4><p>从stdin流中读取字符串，直至接受到<strong>换行符</strong>或<strong>EOF</strong>时停止，并将读取的结果存放在buffer指针所指向的字符数组中。换行符不作为读取串的内容，读取的换行符被转换为<code>&#39;\0&#39;</code>空字符，并由此来结束字符串。</p><p>因为本函数可以无限读取（不安全），易发生溢出。如果溢出，多出来的字符将被写入到堆栈中，这就覆盖了堆栈原先的内容，破坏一个或多个不相关变量的值。</p></li></ul><hr><ul><li><h4 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h4><blockquote><p>函数声明：char *fgets(char *restrict str, int size, FILE *restrict stream)  &#x2F;&#x2F; <em>(“容器的地址”， “容器的大小”， “从哪里读取”)</em></p></blockquote><p>从第三个参数指定的流中读取最多第二个参数大小的字符到第一个参数指定的容器地址中。在这个过程中，在还没读取够第二个参数指定大小的字符前，读取到换行符<code>&#39;\n&#39;</code>或者需要读取的流中已经没有数据了。则提前结束，并把已经读取到的字符存储进第一个参数指定的容器地址中。</p><p><strong>使用例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">fgets(a, <span class="number">100</span>, <span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="注意事项1"><a href="#注意事项1" class="headerlink" title="注意事项1"></a><em>注意事项1</em></h4><p><code>fgets()</code>函数的最大读取大小是其<strong>“第二个参数减1”</strong>，这是由于字符串是以<code>&#39;\0&#39;</code>为结束符的，<code>fgets()</code>为了保证输入内容的字符串格式，当输入的<strong>数据大小超过了第二个参数指定的大小的时候</strong>，<code>fgets()</code>会仅仅读取前面的<strong>“第二个参数减1”</strong>个字符，而<strong>预留1个字符的空间来存储字符串结束符</strong><code>&#39;\0&#39;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你的输入：&quot;</span>);</span><br><span class="line">    fgets(a, <span class="number">4</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="https://blog.imtop1.moe/wp-content/shuomcblog/zfc1.png"></p><hr><h4 id="注意事项2"><a href="#注意事项2" class="headerlink" title="注意事项2"></a><em>注意事项2</em></h4><p>在<code>fgets()</code>函数的眼里，换行符<code>&#39;\n&#39;</code>也是它要读取的一个普通字符而已。在读取键盘输入的时候会把最后输入的<strong>回车符也存进数组里面</strong>，即把<code>&#39;\n&#39;</code>也存进数组里面，而又由于字符串本身会是以<code>&#39;\0&#39;</code>结尾的。所以在输入字符个数没有超过第二个参数指定大小之前，<code>fgets()</code>存储进的是<strong>n+2位</strong>。最后面会<strong>多出一个<code>&#39;\n&#39;</code>和一个<code>&#39;\0&#39;</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你的输入：&quot;</span>);</span><br><span class="line">    fgets(a, <span class="number">10</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a[%d]是换行符&#x27;\\n&#x27;\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a[%d]是字符串结束符&#x27;\\0&#x27;\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="https://blog.imtop1.moe/wp-content/shuomcblog/zfc2.png"></p><hr><h4 id="注意事项3"><a href="#注意事项3" class="headerlink" title="注意事项3"></a><em>注意事项3</em></h4><p><code>fgets()</code>函数只负责读取，<strong>并不会事先清空参数1指向的地址内存</strong>。读取到的字节会覆盖原地址储存，但没有覆盖到的内容还是保持原样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">10</span>] = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你的输入：&quot;</span>);</span><br><span class="line">    fgets(a, <span class="number">10</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输出：%s\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;实际存储\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="string">&#x27;\0&#x27;</span> &amp;&amp; a[i]!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[%d]：%c\n&quot;</span>,i,a[i]);</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="string">&#x27;\n&#x27;</span> || a[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d]：&#x27;\\%c&#x27;\n&quot;</span>, i, a[i]==<span class="string">&#x27;\n&#x27;</span>?<span class="string">&#x27;n&#x27;</span>:<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="https://blog.imtop1.moe/wp-content/shuomcblog/zfc3.png"></p></li></ul><hr><ul><li><h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar()"></a>getchar()</h3><p>字符输入函数，没有参数，从输入缓冲区里面读取一个字符（一个流或标准输入）</p><p>输入的字符被存放在键盘缓冲区中，直到按回车为止<strong>（ ‘\n’ 也放在缓冲区中）</strong>，键入回车之后，<code>getchar()</code> 才开始从缓冲区每次读取一个字符，<code>getchar ()</code>的返回值是输入的字符的 ASCII 码，若遇到文件结尾则返回EOF (-1)，如果在按回车之前输入了不止一个字符，其他字符会<strong>保留在键盘缓冲区</strong>中，等待后续 <code>getchar()</code> 调用读取。也就是说，后续的 <code>getchar()</code> 调用<strong>不会等待用户按键</strong>，而直接读取缓冲区中的字符，直到缓冲区中的字符读完后，才开始等待。</p><p>注意：<code>getchar()</code>读取每个字符包括制表符、空格、换行符，而<code>scanf()</code>在读取时会跳过制表符、空格、换行符。</p><p><em>常使用</em> <code>getchar()</code><em>吸收缓冲区的字符</em></p></li></ul><hr><ul><li><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h3><p>scanf无法输入空格、tab和回车</p><p>最后的换行会遗留在缓冲区中，需要使用gerchar（）将缓冲区的Enter吃掉</p></li></ul><hr><h2 id="C-3"><a href="#C-3" class="headerlink" title="C++"></a>C++</h2><ul><li><h3 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h3></li></ul><p>cin读取字符串，会将<code>&#39;\n&#39;</code>作为字符串的切割符，读取完成，会自己主动将<code>&#39;\n&#39;</code>转换成<code>&#39;\0&#39;</code>，假设遇到文件结束，那么也将返回false</p><hr><ul><li><h3 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h3></li></ul><p>getline(cin,字符串名字)，getline()接收一个字符串，包括空格与tab键</p>]]></content>
      
      
      <categories>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> C++ </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求最小公倍数和最大公约数</title>
      <link href="/posts/9861f9d2.html"/>
      <url>/posts/9861f9d2.html</url>
      
        <content type="html"><![CDATA[<h1 id="循环硬解"><a href="#循环硬解" class="headerlink" title="循环硬解"></a>循环硬解</h1><p>输入a,b两个值，定义一个数i，将a或b赋值i，用i同时对两数取余，两数都能除尽时，i即为最小公倍数，若余数不为零则i++</p><p>同理，定义一个数j，将j赋值为1，利用j++，如果a和b能同时除尽j，则求出最大公约数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b,i,j;</span><br><span class="line"><span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span>(i=a;;i++)<span class="comment">//求最小公倍数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%a==<span class="number">0</span>&amp;&amp;i%b==<span class="number">0</span>)<span class="comment">//用大于等于a和b的数i(i大于等于a和b，无上限)分别除以a和b，同时除尽的第一个数即为最小公倍数</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//然后循环结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=a;j++)<span class="comment">//求最大公约数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a%j==<span class="number">0</span>&amp;&amp;b%j==<span class="number">0</span>)<span class="comment">//让a和b分别除以j(j从一开始，j有上限要小于等于a或b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用j++，如果a和b能同时除尽j</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;j)<span class="comment">//再判断j是不是小于a或b的最大公约数，不是则赋值最大值</span></span><br><span class="line">max=j;<span class="comment">//这样求出来的max即为最大公约数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,max);<span class="comment">//最后最大公约数用max表示了</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>或使用j–</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b,i,j;</span><br><span class="line"><span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=a;;j--)<span class="comment">//求最大公约数</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(a%j==<span class="number">0</span>&amp;&amp;b%j==<span class="number">0</span>)<span class="comment">//还是用a和b除以j(j直接赋值为a或b，示例赋值为a(b也可以的))</span></span><br><span class="line">                          <span class="comment">//利用j--，第一个a和b同时除尽的数j即为最大公约数</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//然后直接结束循环即可</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,j);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="辗转相除"><a href="#辗转相除" class="headerlink" title="辗转相除"></a>辗转相除</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="type">int</span> m,n,t,a,b;</span><br><span class="line">  t=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">  a=m;</span><br><span class="line">  b=n;<span class="comment">//先把m和n分别赋值给a和b，用来求最小公倍数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(t=m%n,t!=<span class="number">0</span>)<span class="comment">//限制条件有两个</span></span><br><span class="line"><span class="comment">//求出最小公约数和最大公倍数的数值与m和n大小无关，所以不用考虑是m%n还是n%m，结果一样</span></span><br><span class="line">&#123;</span><br><span class="line">m=n;</span><br><span class="line">n=t;<span class="comment">//辗转相除</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最大公约数是:%d\n&quot;</span>,n);<span class="comment">//最后n为最大公约数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最小公倍数是:%d\n&quot;</span>,a/n*b);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用文章：<a href="https://blog.csdn.net/m0_66304425/article/details/123920248">https://blog.csdn.net/m0_66304425/article/details/123920248</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社团迎新题随笔</title>
      <link href="/posts/3d84f0.html"/>
      <url>/posts/3d84f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="初遇ACM社团题"><a href="#初遇ACM社团题" class="headerlink" title="初遇ACM社团题"></a>初遇ACM社团题</h1><ul><li><h2 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h2><ul><li><h3 id="猜比分"><a href="#猜比分" class="headerlink" title="猜比分"></a>猜比分</h3><p>给定一组比分  如：*<del>114514 : 191981</del>*</p><p>让N个人来猜比分</p><p>第1个人编号为1</p><p>第2个人编号为2</p><p>……</p><p>第N个人编号为N</p><p>找出猜出比分最接近真实比分的<strong>编号</strong></p></li><li><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>每行包含两个整数 以空格分开（范围都在[0~999999]内）<br>第一行两个整数是CC PJ 的最终比分<br>从第二行开始的若干行 </p><p>分别是</p><p>第1位同学的竞猜结果 </p><p>第2位同学的竞猜结果</p><p>……</p><p>第N位同学的竞猜结果</p><p>以-1 -1结束输入</p></li><li><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>一个整数 表示的是竞猜比分最接近真实结果的同学的编号</p></li><li><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">1328 1158</span><br><span class="line">500 700</span><br><span class="line">36 38</span><br><span class="line">423 450</span><br><span class="line">100 80</span><br><span class="line">380 80</span><br><span class="line">550 450</span><br><span class="line">735 735</span><br><span class="line">520 680</span><br><span class="line">390 170</span><br><span class="line">1800 800</span><br><span class="line">16 61</span><br><span class="line">61 16</span><br><span class="line">50 48</span><br><span class="line">66 60</span><br><span class="line">800 200</span><br><span class="line">43 29</span><br><span class="line">400 600</span><br><span class="line">900 800</span><br><span class="line">98 98</span><br><span class="line">401 451</span><br><span class="line">350 500</span><br><span class="line">173 184</span><br><span class="line">576 486</span><br><span class="line">113 255</span><br><span class="line">300 275</span><br><span class="line">666 545</span><br><span class="line">275 194</span><br><span class="line">361 258</span><br><span class="line">66 63</span><br><span class="line">98 138</span><br><span class="line">272 243</span><br><span class="line">500 500</span><br><span class="line">257 76</span><br><span class="line">927 826</span><br><span class="line">600 560</span><br><span class="line">100 150</span><br><span class="line">2246 1748</span><br><span class="line">350 300</span><br><span class="line">23 30</span><br><span class="line">300 200</span><br><span class="line">369 396</span><br><span class="line">300 500</span><br><span class="line">436 327</span><br><span class="line">970 630</span><br><span class="line">400 550</span><br><span class="line">400 500</span><br><span class="line">400 500</span><br><span class="line">1000 600</span><br><span class="line">555 333</span><br><span class="line">350 300</span><br><span class="line">2028 1197</span><br><span class="line">777 456</span><br><span class="line">-1 -1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">34</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="急功近利"><a href="#急功近利" class="headerlink" title="急功近利"></a>急功近利</h2><p>​    首先，这道题并不复杂，甚至可以用简单来形容，基本上是没有什么算法的，只有单纯的选择、赋值与记录，作为一名C语言初学者，相比于平时的练习题，冗长复杂的题目介绍以及输入数据让我开头就上了心态（因为也是班上前几的排名所以比较着急）。也可能是沉迷于网站搭建，脑子里早就把当初对C的理解、逻辑抛在脑后，剩下的就只有焦虑和惊慌失措，写的循环乱七八糟，有些条件甚至是互斥的（真不知道当时脑子是怎么想的），错误…….死循环……</p><p><del><em>以为需要排序算法还去看了算法</em></del><em><del>的屑</del></em></p><p>换了三种方案，很遗憾都是<strong>Wrong Answer</strong></p></li><li><h2 id="开摆"><a href="#开摆" class="headerlink" title="开摆"></a>开摆</h2><p>放弃了，继续美化博客和网上冲浪</p></li><li><h2 id="梦醒时分"><a href="#梦醒时分" class="headerlink" title="梦醒时分"></a>梦醒时分</h2><p>大早上起来军训，站在体育场上被寒风刮被细雨打，一瞬间我理解了<strong>宮本浩次</strong></p><ul><li><h3 id="冬の花"><a href="#冬の花" class="headerlink" title="冬の花"></a>冬の花</h3><p><del>事被撅了罢</del></p><p>其实只需要将比分赋值为a,b;循环扫描猜想比分m,n;</p><p>编号++</p><p>再将之做差</p><p>将所得差寄存</p><p>如果后续的差小于此时差，则被替换为后续差（差越小表示越接近）</p><p>同时在定义一个变量将编号寄存</p><p>重复循环至结束</p></li></ul></li><li><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b; <span class="comment">//正确比分 </span></span><br><span class="line"><span class="type">int</span> m,n; <span class="comment">//每组猜想比分 </span></span><br><span class="line"><span class="type">int</span> c,d; <span class="comment">//差 </span></span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>,truth; <span class="comment">//编号以及记录编号 </span></span><br><span class="line"><span class="type">int</span> x=<span class="number">999999</span>,y=<span class="number">999999</span>; <span class="comment">//记录最小的差 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b); <span class="comment">//第一组数据 正确比分 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n); <span class="comment">//循环输入每组比分 </span></span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">-1</span> &amp;&amp; n==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//满足条件跳出循环 </span></span><br><span class="line">        <span class="comment">/*作差*/</span> </span><br><span class="line"><span class="keyword">if</span>(m&gt;=a)</span><br><span class="line">&#123;</span><br><span class="line">c=m-a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&lt;a)</span><br><span class="line">&#123;</span><br><span class="line">c=a-m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=b)</span><br><span class="line">&#123;</span><br><span class="line">d=n-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">d=b-n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*顺序记录编号*/</span> </span><br><span class="line">num++;</span><br><span class="line"><span class="comment">/*判断是否更新最小差以及输出编号*/</span> </span><br><span class="line"><span class="keyword">if</span>(c&lt;=x &amp;&amp; d&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">x=c;</span><br><span class="line">y=d;</span><br><span class="line">truth=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出*/</span> </span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d&quot;</span>,truth);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><del>我是小丑</del></p><p>一定要先分析思路，整理逻辑！！！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo和github搭建个人博客</title>
      <link href="/posts/fbbf84ee.html"/>
      <url>/posts/fbbf84ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    如果你想拥有一个自己的简易精美小站而又不喜欢复杂的流程以及租赁昂贵VPS服务器（如在VPS上使用<em>lnmp</em>和<em>wordpress</em>搭建），那么使用<strong>Hexo</strong>+<strong>github</strong>搭建个人博客是最好的方案，并且能够真正实现零成本搭建，同时也没用申请域名证书的烦恼，<del>当然如果你想也是可以的</del>，之所以推荐<strong>Hexo</strong>是因为使用它来搭建的人比较多，如果出现问题能找到有效的解决方法。跟着下面的流程，小白也可以轻松搭建。</p><hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p><strong>Hexo</strong>是一款基于<strong>Node.js</strong>的博客框架，因此，在开始搭建前，我们需要安装<strong>Node.js</strong></p><p>同时，为了能使本地搭建的博客能够在<strong>github</strong>完成部署，我们还需要安装<strong>Git</strong></p><ul><li><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><blockquote><p><strong><a href="https://nodejs.org/">https://nodejs.org/</a></strong></p></blockquote><p>进入官网选择<strong>LTS</strong>版本下载安装</p></li><li><h3 id="检查安装是否成功（可选）"><a href="#检查安装是否成功（可选）" class="headerlink" title="检查安装是否成功（可选）"></a>检查安装是否成功（可选）</h3><p>以管理员身份启动终端，使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>若出现版本号则安装成功</p><p><strong>!!若无权限请更改Windows PowerShell中的执行策略</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Unrestricted</span><br></pre></td></tr></table></figure></li><li><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><blockquote><p><strong><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></strong></p></blockquote><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set PATH=%PATH%;C:\Program Files\Git\bin</span><br></pre></td></tr></table></figure><p>若安装路径不一样，复制安装路径到终端即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set PATH=%PATH%;\example path\</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装框架"><a href="#安装框架" class="headerlink" title="安装框架"></a>安装框架</h2><ul><li><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在终端中使用npm安装<strong>Hexo</strong>框架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h1><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>创建博客目录（你可以为它取名，这里就以blog为例，所有你博客的内容都会放到这个目录下）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><p>进入目录（创建完成后你一样可以在文件资源管理器中找到它）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure><h2 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h2><p>在blog目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>耐心等待博客初始化完成</p><p>现在运行一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>等待启动完成后你就可以在本地4000端口访问它！</p><p>使用<strong>Hexo</strong>新建一篇blog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;example name&quot;</span><br></pre></td></tr></table></figure><p><em>注：你的博客文章都会被保存在…&#x2F;blog&#x2F;source&#x2F;_posts&#x2F; 目录下</em></p><p>是时候将它部署到到<strong>github</strong>了</p><hr><h1 id="部署至github"><a href="#部署至github" class="headerlink" title="部署至github"></a>部署至github</h1><h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><blockquote><p><strong><a href="https://github.com/">https://github.com/</a></strong></p></blockquote><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>登陆后进入仓库在右上角点击绿色按钮“ 新建仓库 ”（New repository）</p><p><img src="https://s1.ax1x.com/2022/10/08/xGa2CT.png"></p><p>在Repository name一栏中严格按照 <strong>username</strong>.github.io 的格式填写</p><p>如用户名为<em>shuomc</em>则填写<em>shuomc.github.io</em></p><p><strong>!!!注意!!!一定要严格按照此格式，否则git之后会报错!!!</strong></p><p>点击 “ <u>Create repository</u> ” 完成创建</p><h2 id="配置SSH链接"><a href="#配置SSH链接" class="headerlink" title="配置SSH链接"></a>配置SSH链接</h2><ul><li><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p>正确创建后在跳转的页面可以看到有HTTPS和SSH链接，我们选择<strong>SSH</strong></p><p><img src="https://s1.ax1x.com/2022/10/08/xG6IqU.png"></p><p>复制此<strong>SSH</strong>链接</p><p>运行<strong>Git bash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “你的邮箱”</span><br></pre></td></tr></table></figure><p>根据提示敲回车，这里不需要密码所以直接敲三次回车获得<strong>token</strong></p><p>此时生成了一份公钥和一份私钥</p><p>在 <em><strong>C:\users(用户)\用户名\ .ssh</strong></em> 下将带有 <strong>.pub</strong> 后缀的文件打开并复制内容</p></li><li><h3 id="添加SSH-key"><a href="#添加SSH-key" class="headerlink" title="添加SSH key"></a>添加SSH key</h3><p>回到<strong>github</strong>点击右上角头像打开<strong>setting</strong>，选择<u>SSH and GPG keys</u>创建新SSH密钥</p><p><img src="https://s1.ax1x.com/2022/10/08/xGB2w9.png"></p><p>点击<strong>New SSH key</strong></p><p>Title随便填写</p><p>将刚才复制的 <strong>.pub</strong> 后缀的文件内容粘贴到 <strong>Key</strong> 一栏</p><p>点击<strong>Add SSH key</strong></p><p>如果看到和上图一样的界面则表示成功</p></li></ul><h2 id="安装Git插件"><a href="#安装Git插件" class="headerlink" title="安装Git插件"></a>安装Git插件</h2><p><strong>Hexo</strong>通过git在github完成部署，我们需要在<strong>blog</strong>根目录下安装插件</p><p>在终端中输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /你的blog文件夹路径/  #进入根目录</span><br></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd   #查看当前位置</span><br></pre></td></tr></table></figure><p>接下来开始安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm installhexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="修改Hexo配置文件"><a href="#修改Hexo配置文件" class="headerlink" title="修改Hexo配置文件"></a>修改Hexo配置文件</h2><p>在根目录下找到 <strong>_config.yml</strong> 文件，打开</p><p>找到<strong>Deployment</strong>修改为如图</p><img src="https://s1.ax1x.com/2022/10/08/xGrd2V.png" style="zoom: 150%;" /><p><em>注：此SSH链接为创建仓库时获得，你后续也可以回到<strong>repository</strong>找到它</em></p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>所有设置均已完成，现在将它一键三连推至github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>出现 <strong>INFO</strong>  Deploy done: git 则说明成功</p><p>部署需要一段时间，请耐心等待</p><hr><h1 id="检验成果"><a href="#检验成果" class="headerlink" title="检验成果"></a>检验成果</h1><h2 id="查看网页"><a href="#查看网页" class="headerlink" title="查看网页"></a>查看网页</h2><p>输入刚刚仓库的链接查看部署情况</p><blockquote><p><strong><a href="https://username.github.io/">https://username.github.io</a></strong></p></blockquote><p>如果你看到</p><p><img src="https://s1.ax1x.com/2022/10/08/xG6c5j.png"></p><p>恭喜！你成功搭建了你的个人博客！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="你好！我叫shuomc"><a href="#你好！我叫shuomc" class="headerlink" title="你好！我叫shuomc"></a>你好！我叫shuomc</h1><p><del>也可以叫我vsjun</del></p><p>目前为大一新生，热爱计算机，也喜欢编程，这个网站是我自学hexo搭建、美化并且加装了一系列插件完成的，后续还会跟进网站的拓展以及建设。</p><h2 id="建立目的"><a href="#建立目的" class="headerlink" title="建立目的"></a>建立目的</h2><p> 小站的建立是为了能更好地学习计算机相关内容 ( 云笔记 ) ，<del>也想勾搭一些大佬</del>。本人在大学前并没有接触过编程，但一直有浓厚的兴趣，目前为C语言初学者。小站将会更新C语言学习、网站搭建相关的文章以及其它干货经验分享。</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p> 其实我挺喜欢游戏开发，不过我可能做不了技术美术的活，<del>希望能成为优秀的游戏程序员</del></p><p> <strong><del>目标加入UBISOFT</del></strong></p><p><em>( 2023.3.18更新 )</em></p><p>突然想学Python了，AI真是时代浪潮，看起来我还要把数据结构和算法理解透</p><p>要不要走游戏开发的道路，我会慎重考虑</p><p><strong>Artwork or Artificial</strong></p><p>这是个问题</p><p>当然，后者的门槛较高</p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p><strong>QQ：1164659757</strong></p><p><strong>微信：ubivsj2014</strong></p><p><strong>github：<a href="https://github.com/shuomc">https://github.com/shuomc</a></strong></p><h2 id="本站链接"><a href="#本站链接" class="headerlink" title="本站链接"></a>本站链接</h2><blockquote><p><strong><a href="https://si.shuomc.buzz/">shuomc的博客 - 分享生活, 记录学习</a></strong></p></blockquote><p>如果你觉得我的文章不错，可以分享给身边的朋友，也希望有大佬能指出我的不足，欢迎交换友链！！！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custm.css"/>
      <url>/css/custm.css</url>
      
        <content type="html"><![CDATA[  /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.7);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.7);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.7);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.7);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.7);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.7);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.7);  }    /*夜间模式伪类遮罩层透明*/  [data-theme='dark'] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme='dark'] .card-widget {    background: #121212 !important;  }    [data-theme='dark'] div#post {    background: #121212 !important;  }    [data-theme='dark'] div#tag {    background: #121212 !important;  }    [data-theme='dark'] div#archive {    background: #121212 !important;  }    [data-theme='dark'] div#page {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }       /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.7);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.7);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }       /* 鼠标图标 */  /* body {    cursor: url('/img/x1.cur'), auto;  }  a,  [type='button']:not(:disabled),  [type='reset']:not(:disabled),  [type='submit']:not(:disabled),  button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;  } */  /* md网站下划线 */  /* #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  } */    /* 404页面  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #425aef;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 3px;/*顶部距离*/    left: 0;    right: 0;    height: 6px;    border-radius: 6px;    width: 100rem;/*条长度*/    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;  }    .pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;  }    .pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 1600px; /*彩带长度*/    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-50deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 100%;  }    .pace.pace-inactive {    opacity: 0;    transition: 0.3s;    top: -8px;  }  @keyframes gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>朋友们</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>随便逛逛</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
